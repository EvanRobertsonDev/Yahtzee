/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Yahtzee;
import java.awt.Color;
import java.net.URI;
import java.net.URISyntaxException;
import java.awt.Desktop;
import java.io.IOException;
import java.util.Arrays;

/**
 *
 * @author evrob0095
 */
public class Yahtzee extends javax.swing.JFrame {

    /**
     * Creates new form Yahtzee
     */
    public Yahtzee() {
        initComponents();
        //Setup start page
        startGame.setEnabled(false);
        GamePage.setVisible(false);
        scorePage.setVisible(false);
        player1.setEnabled(false);
        player2.setEnabled(false);
        player3.setEnabled(false);
        player4.setEnabled(false);
        
        
        threeKind.setEnabled(false);
        fourKind.setEnabled(false);
        Yahtzee.setEnabled(false);
        fullHouse.setEnabled(false);
        largeStraight.setEnabled(false);
        smallStraight.setEnabled(false);
        
    }
    //Name variables
    String name1;
    String name2;
    String name3;
    String name4;
    
    //Scores for players
    int score1 = 0;
    int score2 = 0;
    int score3 = 0;
    int score4 = 0;
    
    //Variables to determine playes and what turn it is
    int turnCount = 0;
    int numPlayers = 0;
    
    //Random numbers generated by six sided dice
    int random1 = 0;
    int random2 = 0;
    int random3 = 0;
    int random4 = 0;
    int random5 = 0;
    
    //Arrays
    int [] diceArray = new int [5];
    int [] dieArray = new int [5];
    
    //Re roll variables
    int reRollCount = 0;
    boolean reRollPress = false;
    boolean reRoll1 = false;
    boolean reRoll2 = false;
    boolean reRoll3 = false;
    boolean reRoll4 = false;
    boolean reRoll5 = false;
    
    //Checking Small Stright
    int SmallCounter = 0;
    
    //Checking full house
    boolean hasPair = false;
    boolean hasThree = false;
    
    //Preset Scores
    final int FULL_HOUSE = 25;
    final int SM_STRAIGHT = 30;
    final int LG_STRAIGHT = 40;
    final int YAHTZEE = 50;
    final int BONUS = 100;
    boolean YahtzeeBonus1 = false;
    boolean YahtzeeBonus2 = false;
    boolean YahtzeeBonus3 = false;
    boolean YahtzeeBonus4 = false;
    
    //Lock up radio buttons after one use
    boolean Aces1 = false;
    boolean Aces2 = false;
    boolean Aces3 = false;
    boolean Aces4 = false;
    boolean Twos1 = false;
    boolean Twos2 = false;
    boolean Twos3 = false;
    boolean Twos4 = false;
    boolean Threes1 = false;
    boolean Threes2 = false;
    boolean Threes3 = false;
    boolean Threes4 = false;
    boolean Fours1 = false;
    boolean Fours2 = false;
    boolean Fours3 = false;
    boolean Fours4 = false;
    boolean Fives1 = false;
    boolean Fives2 = false;
    boolean Fives3 = false;
    boolean Fives4 = false;
    boolean Sixes1 = false;
    boolean Sixes2 = false;
    boolean Sixes3 = false;
    boolean Sixes4 = false;
    boolean threeKind1 = false;
    boolean threeKind2 = false;
    boolean threeKind3 = false;
    boolean threeKind4 = false;
    boolean fourKind1 = false;
    boolean fourKind2 = false;
    boolean fourKind3 = false;
    boolean fourKind4 = false;
    boolean fullHouse1 = false;
    boolean fullHouse2 = false;
    boolean fullHouse3 = false;
    boolean fullHouse4 = false;
    boolean smallStraight1 = false;
    boolean smallStraight2 = false;
    boolean smallStraight3 = false;
    boolean smallStraight4 = false;
    boolean largeStraight1 = false;
    boolean largeStraight2 = false;
    boolean largeStraight3 = false;
    boolean largeStraight4 = false;
    boolean yahtzee1 = false;
    boolean yahtzee2 = false;
    boolean yahtzee3 = false;
    boolean yahtzee4 = false;
    boolean chance1 = false;
    boolean chance2 = false;
    boolean chance3 = false;
    boolean chance4 = false;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        category = new javax.swing.ButtonGroup();
        Start = new javax.swing.JPanel();
        title1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        playCount = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        player1 = new javax.swing.JTextField();
        player2 = new javax.swing.JTextField();
        player3 = new javax.swing.JTextField();
        player4 = new javax.swing.JTextField();
        startGame = new javax.swing.JButton();
        Rules = new javax.swing.JButton();
        GamePage = new javax.swing.JPanel();
        rerollButton = new javax.swing.JButton();
        roll5 = new javax.swing.JLabel();
        roll3 = new javax.swing.JLabel();
        roll2 = new javax.swing.JLabel();
        roll1 = new javax.swing.JLabel();
        roll4 = new javax.swing.JLabel();
        rollButton = new javax.swing.JButton();
        upperSection = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        lowerSection = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        endTurnButton = new javax.swing.JButton();
        largeStraight = new javax.swing.JRadioButton();
        aces = new javax.swing.JRadioButton();
        twos = new javax.swing.JRadioButton();
        threes = new javax.swing.JRadioButton();
        fours = new javax.swing.JRadioButton();
        fives = new javax.swing.JRadioButton();
        sixes = new javax.swing.JRadioButton();
        threeKind = new javax.swing.JRadioButton();
        fourKind = new javax.swing.JRadioButton();
        Yahtzee = new javax.swing.JRadioButton();
        chance = new javax.swing.JRadioButton();
        fullHouse = new javax.swing.JRadioButton();
        smallStraight = new javax.swing.JRadioButton();
        title = new javax.swing.JLabel();
        turnLabel = new javax.swing.JLabel();
        doneButton = new javax.swing.JButton();
        scorePage = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        playButton = new javax.swing.JButton();
        dicePic = new javax.swing.JLabel();
        title2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Start.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title1.setBackground(new java.awt.Color(255, 255, 255));
        title1.setFont(new java.awt.Font("Rosewood Std Regular", 0, 110)); // NOI18N
        title1.setForeground(new java.awt.Color(255, 153, 0));
        title1.setText("yahtzee");
        Start.add(title1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 440, -1));

        jLabel1.setFont(new java.awt.Font("AdLib Win95BT", 0, 14)); // NOI18N
        jLabel1.setText("What are their names?");
        Start.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, -1, -1));

        playCount.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 Player", "2 Players", "3 Players", "4 Players" }));
        playCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playCountActionPerformed(evt);
            }
        });
        Start.add(playCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 180, -1, -1));

        jLabel2.setFont(new java.awt.Font("AdLib Win95BT", 0, 14)); // NOI18N
        jLabel2.setText("How many people are playing?");
        Start.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, -1, -1));
        Start.add(player1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 260, 90, -1));
        Start.add(player2, new org.netbeans.lib.awtextra.AbsoluteConstraints(399, 260, 90, -1));

        player3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player3ActionPerformed(evt);
            }
        });
        Start.add(player3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 310, 90, -1));
        Start.add(player4, new org.netbeans.lib.awtextra.AbsoluteConstraints(399, 310, 90, -1));

        startGame.setText("Start Game");
        startGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameActionPerformed(evt);
            }
        });
        Start.add(startGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, 90, -1));

        Rules.setText("Rules");
        Rules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RulesActionPerformed(evt);
            }
        });
        Start.add(Rules, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 390, 90, 30));

        getContentPane().add(Start, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 490));

        GamePage.setBackground(new java.awt.Color(102, 102, 255));
        GamePage.setForeground(new java.awt.Color(255, 153, 0));
        GamePage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rerollButton.setBackground(new java.awt.Color(102, 102, 255));
        rerollButton.setText("Re Roll");
        rerollButton.setEnabled(false);
        rerollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rerollButtonActionPerformed(evt);
            }
        });
        GamePage.add(rerollButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        roll5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roll5.setForeground(new java.awt.Color(255, 255, 255));
        roll5.setText("?");
        roll5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roll5MouseClicked(evt);
            }
        });
        GamePage.add(roll5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 210, -1, -1));

        roll3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roll3.setForeground(new java.awt.Color(255, 255, 255));
        roll3.setText("?");
        roll3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roll3MouseClicked(evt);
            }
        });
        GamePage.add(roll3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 210, -1, -1));

        roll2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roll2.setForeground(new java.awt.Color(255, 255, 255));
        roll2.setText("?");
        roll2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roll2MouseClicked(evt);
            }
        });
        GamePage.add(roll2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 210, -1, -1));

        roll1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roll1.setForeground(new java.awt.Color(255, 255, 255));
        roll1.setText("?");
        roll1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roll1MouseClicked(evt);
            }
        });
        GamePage.add(roll1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, -1, -1));

        roll4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roll4.setForeground(new java.awt.Color(255, 255, 255));
        roll4.setText("?");
        roll4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roll4MouseClicked(evt);
            }
        });
        GamePage.add(roll4, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 210, -1, -1));

        rollButton.setBackground(new java.awt.Color(102, 102, 255));
        rollButton.setText("Roll");
        rollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollButtonActionPerformed(evt);
            }
        });
        GamePage.add(rollButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Aces", " Count and add only ones"},
                {"Twos", " Count and add only twos "},
                {"Threes", " Count and add only threes"},
                {"Fours", " Count and add only fours"},
                {"Fives", " Count and add only fives"},
                {"Sixes", " Count and add only sixes"},
                {"Bonus (Total score is 63 or over)", "                     Score 35"}
            },
            new String [] {
                "Upper Section", "How to Score"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setRowHeight(32);
        upperSection.setViewportView(jTable2);

        GamePage.add(upperSection, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 390, 260));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"3 of a kind", " Add total of all dice"},
                {"4 of a kind", " Add total of all dice"},
                {"Full house", " Score 25"},
                {"Small straight (sequence of 4)", " Score 30"},
                {"Large straight (sequence of 5)", " Score 40"},
                {"Yahtzee (5 of a kind)", " Score 50"},
                {"Chance", " Add total of all 5 dice"},
                {"Yahtzee Bonus", " Score 100 for every Yahtzee after"}
            },
            new String [] {
                "Lower Section", "How to Score"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(32);
        lowerSection.setViewportView(jTable1);

        GamePage.add(lowerSection, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 210, 360, 290));

        endTurnButton.setBackground(new java.awt.Color(102, 102, 255));
        endTurnButton.setText("End Turn");
        endTurnButton.setEnabled(false);
        endTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTurnButtonActionPerformed(evt);
            }
        });
        GamePage.add(endTurnButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 150, -1, -1));

        largeStraight.setBackground(new java.awt.Color(102, 102, 255));
        category.add(largeStraight);
        largeStraight.setForeground(new java.awt.Color(255, 153, 0));
        largeStraight.setText("Large straight (5)");
        GamePage.add(largeStraight, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 110, -1, -1));

        aces.setBackground(new java.awt.Color(102, 102, 255));
        category.add(aces);
        aces.setForeground(new java.awt.Color(255, 153, 0));
        aces.setText("Aces");
        aces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acesActionPerformed(evt);
            }
        });
        GamePage.add(aces, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, -1, -1));

        twos.setBackground(new java.awt.Color(102, 102, 255));
        category.add(twos);
        twos.setForeground(new java.awt.Color(255, 153, 0));
        twos.setText("Twos");
        twos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twosActionPerformed(evt);
            }
        });
        GamePage.add(twos, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 50, -1, -1));

        threes.setBackground(new java.awt.Color(102, 102, 255));
        category.add(threes);
        threes.setForeground(new java.awt.Color(255, 153, 0));
        threes.setText("Threes");
        GamePage.add(threes, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 70, -1, -1));

        fours.setBackground(new java.awt.Color(102, 102, 255));
        category.add(fours);
        fours.setForeground(new java.awt.Color(255, 153, 0));
        fours.setText("Fours");
        GamePage.add(fours, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 90, -1, -1));

        fives.setBackground(new java.awt.Color(102, 102, 255));
        category.add(fives);
        fives.setForeground(new java.awt.Color(255, 153, 0));
        fives.setText("Fives");
        GamePage.add(fives, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, -1, -1));

        sixes.setBackground(new java.awt.Color(102, 102, 255));
        category.add(sixes);
        sixes.setForeground(new java.awt.Color(255, 153, 0));
        sixes.setText("Sixes");
        GamePage.add(sixes, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 130, -1, -1));

        threeKind.setBackground(new java.awt.Color(102, 102, 255));
        category.add(threeKind);
        threeKind.setForeground(new java.awt.Color(255, 153, 0));
        threeKind.setText("3 of a kind");
        GamePage.add(threeKind, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, -1, -1));

        fourKind.setBackground(new java.awt.Color(102, 102, 255));
        category.add(fourKind);
        fourKind.setForeground(new java.awt.Color(255, 153, 0));
        fourKind.setText("4 of a kind");
        GamePage.add(fourKind, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, -1, -1));

        Yahtzee.setBackground(new java.awt.Color(102, 102, 255));
        category.add(Yahtzee);
        Yahtzee.setForeground(new java.awt.Color(255, 153, 0));
        Yahtzee.setText("Yahtzee (5 of a kind)");
        GamePage.add(Yahtzee, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 130, -1, -1));

        chance.setBackground(new java.awt.Color(102, 102, 255));
        category.add(chance);
        chance.setForeground(new java.awt.Color(255, 153, 0));
        chance.setText("Chance");
        GamePage.add(chance, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 150, -1, -1));

        fullHouse.setBackground(new java.awt.Color(102, 102, 255));
        category.add(fullHouse);
        fullHouse.setForeground(new java.awt.Color(255, 153, 0));
        fullHouse.setText("Full house");
        GamePage.add(fullHouse, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 70, -1, -1));

        smallStraight.setBackground(new java.awt.Color(102, 102, 255));
        category.add(smallStraight);
        smallStraight.setForeground(new java.awt.Color(255, 153, 0));
        smallStraight.setText("Small straight (4)");
        smallStraight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smallStraightActionPerformed(evt);
            }
        });
        GamePage.add(smallStraight, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 90, -1, -1));

        title.setBackground(new java.awt.Color(255, 255, 255));
        title.setFont(new java.awt.Font("Rosewood Std Regular", 0, 110)); // NOI18N
        title.setForeground(new java.awt.Color(255, 153, 0));
        title.setText("yahtzee");
        GamePage.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 440, -1));

        turnLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        turnLabel.setForeground(new java.awt.Color(255, 255, 255));
        turnLabel.setText("It's ____'s Turn");
        GamePage.add(turnLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        doneButton.setBackground(new java.awt.Color(102, 102, 255));
        doneButton.setText("Done");
        doneButton.setEnabled(false);
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });
        GamePage.add(doneButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 210, -1, -1));

        getContentPane().add(GamePage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 490));

        scorePage.setBackground(new java.awt.Color(102, 102, 255));
        scorePage.setForeground(new java.awt.Color(255, 153, 0));
        scorePage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Score"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(scoreTable);

        scorePage.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, -1, 100));

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        scorePage.add(playButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 250, -1, -1));

        dicePic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Yahtzee/multiple-white-dice-black-spots-7666156.jpg"))); // NOI18N
        scorePage.add(dicePic, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 280, -1, -1));

        title2.setBackground(new java.awt.Color(255, 255, 255));
        title2.setFont(new java.awt.Font("Rosewood Std Regular", 0, 110)); // NOI18N
        title2.setForeground(new java.awt.Color(255, 153, 0));
        title2.setText("yahtzee");
        scorePage.add(title2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 440, -1));

        getContentPane().add(scorePage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void twosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_twosActionPerformed

    private void smallStraightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smallStraightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_smallStraightActionPerformed

    private void player3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_player3ActionPerformed

    /**
     * When an amount of players is chosen from the combo box it sets that number
     * to a variable and unlocks the start button
     * @param evt 
     */
    private void playCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playCountActionPerformed
        //Decide how many players and then enables boxes for names
        if (playCount.getSelectedIndex() == 0) {
            player1.setEnabled(true);
            player2.setEnabled(false);
            player3.setEnabled(false);
            player4.setEnabled(false);
            numPlayers = 1;
            startGame.setEnabled(true);
        }
        else if (playCount.getSelectedIndex() == 1) {
            player1.setEnabled(true);
            player2.setEnabled(true);
            player3.setEnabled(false);
            player4.setEnabled(false);
            numPlayers = 2;
            startGame.setEnabled(true);
        }
        else if (playCount.getSelectedIndex() == 2) {
            player1.setEnabled(true);
            player2.setEnabled(true);
            player3.setEnabled(true);
            player4.setEnabled(false);
            numPlayers = 3;
            startGame.setEnabled(true);
        }
        else {
            player1.setEnabled(true);
            player2.setEnabled(true);
            player3.setEnabled(true);
            player4.setEnabled(true);
            numPlayers = 4;
            startGame.setEnabled(true);
        }
    }//GEN-LAST:event_playCountActionPerformed

    /**
     * When start button is set get the text from the start page and add it to
     * a score table
     * @param evt 
     */
    private void startGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGameActionPerformed
        //Get text and start game
        if (playCount.getSelectedIndex() == 0) {
            name1 = player1.getText();
        }
        else if (playCount.getSelectedIndex() == 1) {
            name1 = player1.getText();
            name2 = player2.getText();
        }
        else if (playCount.getSelectedIndex() == 2) {
            name1 = player1.getText();
            name2 = player2.getText();
            name3 = player3.getText();
        }
        else {
            name1 = player1.getText();
            name2 = player2.getText();
            name3 = player3.getText();
            name4 = player4.getText();
        }
        scoreTable.setValueAt(name1, 0, 0);
        scoreTable.setValueAt(name2, 1, 0);
        scoreTable.setValueAt(name3, 2, 0);
        scoreTable.setValueAt(name4, 3, 0);
        scoreTable.setValueAt(score1, 0, 1);
        scoreTable.setValueAt(score2, 1, 1);
        scoreTable.setValueAt(score3, 2, 1);
        scoreTable.setValueAt(score4, 3, 1);
        scorePage.setVisible(true);
        Start.setVisible(false);
    }//GEN-LAST:event_startGameActionPerformed

    /**
     * When play button is clicked set the players name to the top right, 
     * indicating who's turn it is
     * @param evt 
     */
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        scorePage.setVisible(false);
        GamePage.setVisible(true);
        if (turnCount == 0) {
            turnLabel.setText("It's " + name1 + "'s turn");
        }
        else if (turnCount == 1) {
            turnLabel.setText("It's " + name2 + "'s turn");
        }
        else if (turnCount == 2) {
            turnLabel.setText("It's " + name3 + "'s turn");
        }
        else {
            turnLabel.setText("It's " + name4 + "'s turn");
        }
    }//GEN-LAST:event_playButtonActionPerformed
    
    /**
     * When roll button is pressed clear any selection of buttons that may have 
     * been chosen before hand, generate random numbers, set to array, and set 
     * each number to labels. Enable all radio buttons and then call methods to 
     * check if A: the category has already been used or B: the dice rolled do 
     * not meet the requirements for a radio button.
     * 
     * Enable the re roll button and setup for a potential re roll of dice
     * @param evt 
     */
    private void rollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButtonActionPerformed
        //Clear button selection
        category.clearSelection();

        //Random numbers variables
        random1 = (int)Math.round(Math.random()*5+1);
        random2 = (int)Math.round(Math.random()*5+1);
        random3 = (int)Math.round(Math.random()*5+1);
        random4 = (int)Math.round(Math.random()*5+1);       
        random5 = (int)Math.round(Math.random()*5+1);
        
        //Output numbers
        roll1.setText(String.valueOf(random1));
        roll2.setText(String.valueOf(random2));
        roll3.setText(String.valueOf(random3));
        roll4.setText(String.valueOf(random4));
        roll5.setText(String.valueOf(random5));
        
        //Set to array
        diceArray[0] = 1;
        diceArray[1] = 2;
        diceArray[2] = 3;
        diceArray[3] = 6;
        diceArray[4] = 5;
        Arrays.sort(diceArray);
        
        //Second array specfically for small straight
        dieArray[0] = diceArray[0];
        dieArray[1] = diceArray[1];
        dieArray[2] = diceArray[2];
        dieArray[3] = diceArray[3];
        dieArray[4] = diceArray[4];
        Arrays.sort(dieArray);
        
        //Enable all radio buttons and disable accordingly
        aces.setEnabled(true);
        twos.setEnabled(true);
        threes.setEnabled(true);
        fours.setEnabled(true);
        fives.setEnabled(true);
        sixes.setEnabled(true);
        threeKind.setEnabled(true);
        fourKind.setEnabled(true);
        smallStraight.setEnabled(true);
        largeStraight.setEnabled(true);
        fullHouse.setEnabled(true);
        Yahtzee.setEnabled(true);
        chance.setEnabled(true);
        
        //Find what has already been selected
        selections();
        
        //Check what players rolled
        player1Roll();
        player2Roll();
        player3Roll();
        player4Roll();
        
        
        
        
        
        
        
        //Setup for re roll
        rollButton.setEnabled(false);
        rerollButton.setEnabled(true);
        endTurnButton.setEnabled(true);
    }//GEN-LAST:event_rollButtonActionPerformed
    
    /**
     * This method checks whether a category has already been chosen and if so
     * disables the radio button
     */
    public void selections() {
        //Check if aces have been used
        if (turnCount == 0 && Aces1 == true) {
            aces.setEnabled(false);
        }
        else if (turnCount == 1 && Aces2 == true) {
            aces.setEnabled(false);
        }
        else if (turnCount == 2 && Aces3 == true) {
            aces.setEnabled(false);
        }
        else if (turnCount == 3 && Aces4 == true) {
            aces.setEnabled(false);
        }
        //Check if twos have been used
        if (turnCount == 0 && Twos1 == true) {
            twos.setEnabled(false);
        }
        else if (turnCount == 1 && Twos2 == true) {
            twos.setEnabled(false);
        }
        else if (turnCount == 2 && Twos3 == true) {
            twos.setEnabled(false);
        }
        else if (turnCount == 3 && Aces4 == true) {
            twos.setEnabled(false);
        }
        //Check if threes have been used
        if (turnCount == 0 && Threes1 == true) {
            threes.setEnabled(false);
        }
        else if (turnCount == 1 && Threes2 == true) {
            threes.setEnabled(false);
        }
        else if (turnCount == 2 && Threes3 == true) {
            threes.setEnabled(false);
        }
        else if (turnCount == 3 && Threes4 == true) {
            threes.setEnabled(false);
        }
        //Check if fours have been used
        if (turnCount == 0 && Fours1 == true) {
            fours.setEnabled(false);
        }
        else if (turnCount == 1 && Fours2 == true) {
            fours.setEnabled(false);
        }
        else if (turnCount == 2 && Fours3 == true) {
            fours.setEnabled(false);
        }
        else if (turnCount == 3 && Fours4 == true) {
            fours.setEnabled(false);
        }
        //Check if fives have been used
        if (turnCount == 0 && Fives1 == true) {
            fives.setEnabled(false);
        }
        else if (turnCount == 1 && Fives2 == true) {
            fives.setEnabled(false);
        }
        else if (turnCount == 2 && Fives3 == true) {
            fives.setEnabled(false);
        }
        else if (turnCount == 3 && Fives4 == true) {
            fives.setEnabled(false);
        }
        //Check if sixes have been used
        if (turnCount == 0 && Sixes1 == true) {
            sixes.setEnabled(false);
        }
        else if (turnCount == 1 && Sixes2 == true) {
            sixes.setEnabled(false);
        }
        else if (turnCount == 2 && Sixes3 == true) {
            sixes.setEnabled(false);
        }
        else if (turnCount == 3 && Sixes4 == true) {
            sixes.setEnabled(false);
        }
        //Check if 3 of a kind has been used
        if (turnCount == 0 && threeKind1 == true) {
            threeKind.setEnabled(false);
        }
        else if (turnCount == 1 && threeKind2 == true) {
            threeKind.setEnabled(false);
        }
        else if (turnCount == 2 && threeKind3 == true) {
            threeKind.setEnabled(false);
        }
        else if (turnCount == 3 && threeKind4 == true) {
            threeKind.setEnabled(false);
        }
        //Check if 4 of a kind has been used
        if (turnCount == 0 && fourKind1 == true) {
            fourKind.setEnabled(false);
        }
        else if (turnCount == 1 && fourKind2 == true) {
            fourKind.setEnabled(false);
        }
        else if (turnCount == 2 && fourKind3 == true) {
            fourKind.setEnabled(false);
        }
        else if (turnCount == 3 && fourKind4 == true) {
            fourKind.setEnabled(false);
        }
        //Check if full house has been used
        if (turnCount == 0 && fullHouse1 == true) {
            fullHouse.setEnabled(false);
        }
        else if (turnCount == 1 && fullHouse2 == true) {
            fullHouse.setEnabled(false);
        }
        else if (turnCount == 2 && fullHouse3 == true) {
            fullHouse.setEnabled(false);
        }
        else if (turnCount == 3 && fullHouse4 == true) {
            fullHouse.setEnabled(false);
        }
         //Check if small straight has been used
        if (turnCount == 0 && smallStraight1 == true) {
            smallStraight.setEnabled(false);
        }
        else if (turnCount == 1 && smallStraight2 == true) {
            smallStraight.setEnabled(false);
        }
        else if (turnCount == 2 && smallStraight3 == true) {
            smallStraight.setEnabled(false);
        }
        else if (turnCount == 3 && smallStraight4 == true) {
            smallStraight.setEnabled(false);
        }
        //Check if large straight has been used
        if (turnCount == 0 && largeStraight1 == true) {
            largeStraight.setEnabled(false);
        }
        else if (turnCount == 1 && largeStraight2 == true) {
            largeStraight.setEnabled(false);
        }
        else if (turnCount == 2 && largeStraight3 == true) {
            largeStraight.setEnabled(false);
        }
        else if (turnCount == 3 && largeStraight4 == true) {
            largeStraight.setEnabled(false);
        }
        //Check if chance has been used
        if (turnCount == 0 && chance1 == true) {
            chance.setEnabled(false);
        }
        else if (turnCount == 1 && chance2 == true) {
            chance.setEnabled(false);
        }
        else if (turnCount == 2 && chance3 == true) {
            chance.setEnabled(false);
        }
        else if (turnCount == 3 && chance4 == true) {
            chance.setEnabled(false);
        }
    }
    
    /**
     * The method checks for what the player rolled and sees whether to enable 
     * the radio button
     */
    public void player1Roll() {
        //Check what player 1 rolled
        if (turnCount == 0) {
                //Check for Three of a kind
                if (threeKind1 == false) {
                    for (int i = 0; i < 3; i++) {
                            if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2]) {
                                threeKind.setEnabled(true);
                                i = 4;
                            }
                            else {
                                threeKind.setEnabled(false);
                            }
                        }
                }
                //Check for Four of a Kind
                if (fourKind1 == false) {
                    for (int i = 0; i < 2; i++) {
                            if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2] && diceArray[i] == diceArray[i+3]) {
                                fourKind.setEnabled(true);
                                i = 3;
                            }
                            else {
                                fourKind.setEnabled(false);
                            }
                        }
                }
                //Check for Full House
                if (fullHouse1 == false) {
                    for (int i = 0; i < 4; i++) {
                            if (diceArray[i] == diceArray[i+1]) {
                                hasPair = true;
                                diceArray[i] = 7;
                                diceArray[i+1] = 7; 
                                i = 4;
                            }
                            else {
                                hasPair = false;
                            }
                        }
                    for (int i = 0; i < 3; i++) {
                            if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2]) {
                                hasThree = true; 
                                i = 4;
                            }
                            else {
                                hasThree = false;
                            }
                        }
                    if (hasPair == true && hasThree == true) {
                        fullHouse.setEnabled(true);
                    }
                    else {
                        fullHouse.setEnabled(false);
                    }
                }
                //Check for small straight
                if (smallStraight1 == false) {
                    for (int i = 0; i < 4; i++) {
                        if (dieArray[i] + 1 == dieArray[i+1]) {
                            SmallCounter = SmallCounter + 1;
                        }
                        if (dieArray[i+1] == dieArray[i]) {
                            
                        }
                        if (SmallCounter == 3) {
                            smallStraight.setEnabled(true);
                        }
                        else {
                            smallStraight.setEnabled(false);
                        }
                    }
                    if (SmallCounter < 3) {
                        SmallCounter = 0;
                        }
                }
                //Check for large straight
                if (largeStraight1 == false) {
                    for (int i = 0; i < 4; i++) {
                        if (diceArray[i] + 1 == diceArray[i+1]) {
                            largeStraight.setEnabled(true);
                        }
                        else {
                            largeStraight.setEnabled(false);
                            i = 4;
                        }
                    }
                }
                //Check for Yahtzee
                if (yahtzee1 == false) {
                    for (int i = 0; i < 1; i++) {
                            if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2] && diceArray[i] == diceArray[i+3] && diceArray[i] == diceArray[i+4]) {
                                Yahtzee.setEnabled(true);
                                i = 2;
                            }
                            else {
                                Yahtzee.setEnabled(false);
                            }
                        }
                    }
                }
        }
    
    /**
     * The method checks for what the second player rolled and sees whether to enable 
     * the radio button
     */
    public void player2Roll() {
        //Player 2's roll enabling radio buttonss
        if (turnCount == 1) {
            //Check for Three of a kind
            if (threeKind2 == false) {
                for (int i = 0; i < 3; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2]) {
                            threeKind.setEnabled(true);
                            i = 4;
                        }
                        else {
                            threeKind.setEnabled(false);
                        }
                    }
            }
            //Check for Four of a Kind
            if (fourKind2 == false) {
                for (int i = 0; i < 2; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2] && diceArray[i] == diceArray[i+3]) {
                            fourKind.setEnabled(true);
                            i = 3;
                        }
                        else {
                            fourKind.setEnabled(false);
                        }
                    }
            }
            //Check for Full House
            if (fullHouse2 == false) {
                for (int i = 0; i < 4; i++) {
                        if (diceArray[i] == diceArray[i+1]) {
                            hasPair = true;
                            diceArray[i] = 7;
                            diceArray[i+1] = 7; 
                            i = 4;
                        }
                        else {
                            hasPair = false;
                        }
                    }
                for (int i = 0; i < 3; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2]) {
                            hasThree = true; 
                            i = 4;
                        }
                        else {
                            hasThree = false;
                        }
                    }
                if (hasPair == true && hasThree == true) {
                    fullHouse.setEnabled(true);
                }
                else {
                    fullHouse.setEnabled(false);
                }
            }
            //Check for small straight
            if (smallStraight2 == false) {
                for (int i = 0; i < 4; i++) {
                    if (dieArray[i] + 1 == dieArray[i+1]) {
                        SmallCounter = SmallCounter + 1;
                    }
                    else if (dieArray[i+1] == dieArray[i]) {
                    }

                    if (SmallCounter == 3) {
                        smallStraight.setEnabled(true);
                    }
                    else {
                        smallStraight.setEnabled(false);
                    }
                }
            }
            //Check for large straight
            if (largeStraight2 == false) {
                for (int i = 0; i < 4; i++) {
                    if (diceArray[i] + 1 == diceArray[i+1]) {
                        largeStraight.setEnabled(true);
                    }
                    else {
                        largeStraight.setEnabled(false);
                        i = 4;
                    }
                }
            }
            //Check for Yahtzee
            if (yahtzee2 == false) {
                for (int i = 0; i < 1; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2] && diceArray[i] == diceArray[i+3] && diceArray[i] == diceArray[i+4]) {
                            Yahtzee.setEnabled(true);
                            i = 2;
                        }
                        else {
                            Yahtzee.setEnabled(false);
                        }
                    }
                }
            }
    }
    
    /**
     * The method checks for what the third rolled and sees whether to enable 
     * the radio button
     */
    public void player3Roll() {
        //Player 3's roll for enabling radio button
        if (turnCount == 2) {
            //Check for Three of a kind
            if (threeKind3 == false) {
                for (int i = 0; i < 3; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2]) {
                            threeKind.setEnabled(true);
                            i = 4;
                        }
                        else {
                            threeKind.setEnabled(false);
                        }
                    }
            }
            //Check for Four of a Kind
            if (fourKind3 == false) {
                for (int i = 0; i < 2; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2] && diceArray[i] == diceArray[i+3]) {
                            fourKind.setEnabled(true);
                            i = 3;
                        }
                        else {
                            fourKind.setEnabled(false);
                        }
                    }
            }
            //Check for Full House
            if (fullHouse3 == false) {
                for (int i = 0; i < 4; i++) {
                        if (diceArray[i] == diceArray[i+1]) {
                            hasPair = true;
                            diceArray[i] = 7;
                            diceArray[i+1] = 7; 
                            i = 4;
                        }
                        else {
                            hasPair = false;
                        }
                    }
                for (int i = 0; i < 3; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2]) {
                            hasThree = true; 
                            i = 4;
                        }
                        else {
                            hasThree = false;
                        }
                    }
                if (hasPair == true && hasThree == true) {
                    fullHouse.setEnabled(true);
                }
                else {
                    fullHouse.setEnabled(false);
                }
            }
            //Check for small straight
            if (smallStraight3 == false) {
                for (int i = 0; i < 4; i++) {
                    if (dieArray[i] + 1 == dieArray[i+1]) {
                        SmallCounter = SmallCounter + 1;
                    }
                    else if (dieArray[i+1] == dieArray[i]) {
                    }

                    if (SmallCounter == 3) {
                        smallStraight.setEnabled(true);
                    }
                    else {
                        smallStraight.setEnabled(false);
                    }
                }
            }
            //Check for large straight
            if (largeStraight3 == false) {
                for (int i = 0; i < 4; i++) {
                    if (diceArray[i] + 1 == diceArray[i+1]) {
                        largeStraight.setEnabled(true);
                    }
                    else {
                        largeStraight.setEnabled(false);
                        i = 4;
                    }
                }
            }
            //Check for Yahtzee
            if (yahtzee3 == false) {
                for (int i = 0; i < 1; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2] && diceArray[i] == diceArray[i+3] && diceArray[i] == diceArray[i+4]) {
                            Yahtzee.setEnabled(true);
                            i = 2;
                        }
                        else {
                            Yahtzee.setEnabled(false);
                        }
                    }
                }
            }
    }
    
    /**
     * The method checks for what the fourth player rolled and sees whether to enable 
     * the radio button
     */
    public void player4Roll() {
        //Player 4's roll for enabling radio buttons
        if (turnCount == 3) {
            //Check for Three of a kind
            if (threeKind4 == false) {
                for (int i = 0; i < 3; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2]) {
                            threeKind.setEnabled(true);
                            i = 4;
                        }
                        else {
                            threeKind.setEnabled(false);
                        }
                    }
            }
            //Check for Four of a Kind
            if (fourKind4 == false) {
                for (int i = 0; i < 2; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2] && diceArray[i] == diceArray[i+3]) {
                            fourKind.setEnabled(true);
                            i = 3;
                        }
                        else {
                            fourKind.setEnabled(false);
                        }
                    }
            }
            //Check for Full House
            if (fullHouse4 == false) {
                for (int i = 0; i < 4; i++) {
                        if (diceArray[i] == diceArray[i+1]) {
                            hasPair = true;
                            diceArray[i] = 7;
                            diceArray[i+1] = 7; 
                            i = 4;
                        }
                        else {
                            hasPair = false;
                        }
                    }
                for (int i = 0; i < 3; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2]) {
                            hasThree = true; 
                            i = 4;
                        }
                        else {
                            hasThree = false;
                        }
                    }
                if (hasPair == true && hasThree == true) {
                    fullHouse.setEnabled(true);
                }
                else {
                    fullHouse.setEnabled(false);
                }
            }
            //Check for small straight
            if (smallStraight4 == false) {
                for (int i = 0; i < 4; i++) {
                    if (dieArray[i] + 1 == dieArray[i+1]) {
                        SmallCounter = SmallCounter + 1;
                    }
                    else if (dieArray[i+1] == dieArray[i]) {
                        
                    }

                    if (SmallCounter == 3) {
                        smallStraight.setEnabled(true);
                    }
                    else {
                        smallStraight.setEnabled(false);
                    }
                }
            }
            //Check for large straight
            if (largeStraight4 == false) {
                for (int i = 0; i < 4; i++) {
                    if (diceArray[i] + 1 == diceArray[i+1]) {
                        largeStraight.setEnabled(true);
                    }
                    else {
                        largeStraight.setEnabled(false);
                        i = 4;
                    }
                }
            }
            //Check for Yahtzee
            if (yahtzee4 == false) {
                for (int i = 0; i < 1; i++) {
                        if (diceArray[i] == diceArray[i+1] && diceArray[i] == diceArray[i+2] && diceArray[i] == diceArray[i+3] && diceArray[i] == diceArray[i+4]) {
                            Yahtzee.setEnabled(true);
                            i = 2;
                        }
                        else {
                            Yahtzee.setEnabled(false);
                        }
                    }
                }
            }
    }
    
    /**
     * This method is called when a re roll occurs. This is everything in the 
     * roll method excluding things that do not need to be restated
     */
    public void reRoll() {
        //Set to array
        diceArray[0] = random1;
        diceArray[1] = random2;
        diceArray[2] = random3;
        diceArray[3] = random4;
        diceArray[4] = random5;
        Arrays.sort(diceArray);
        
        //Second array specfically for small straight
        dieArray[0] = random1;
        dieArray[1] = random2;
        dieArray[2] = random3;
        dieArray[3] = random4;
        dieArray[4] = random5;
        Arrays.sort(dieArray);
        
        //Enable all radio buttons and disable accordingly
        aces.setEnabled(true);
        twos.setEnabled(true);
        threes.setEnabled(true);
        fours.setEnabled(true);
        fives.setEnabled(true);
        sixes.setEnabled(true);
        threeKind.setEnabled(true);
        fourKind.setEnabled(true);
        smallStraight.setEnabled(true);
        largeStraight.setEnabled(true);
        fullHouse.setEnabled(true);
        Yahtzee.setEnabled(true);
        chance.setEnabled(true);
        
        //Find what has already been selected
        selections();
        
        //Check what players rolled
        player1Roll();
        player2Roll();
        player3Roll();
        player4Roll();
    }
    
    /**
    * When the re roll button is pressed it will enable the user to choose 
    * which numbers they want to re roll.
    * @param evt 
    */
    private void rerollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rerollButtonActionPerformed
        reRollPress = true;
        rerollButton.setEnabled(false);
        doneButton.setEnabled(true);
    }//GEN-LAST:event_rerollButtonActionPerformed

    /**
     * When Rules button is pressed it will open a link to a document containing
     * the rules
     * @param evt 
     */
    private void RulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RulesActionPerformed
        try {
                    Desktop.getDesktop().browse(new URI(""));
                } catch (IOException | URISyntaxException e1) {
                    e1.printStackTrace();
                }
    }//GEN-LAST:event_RulesActionPerformed

    private void acesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acesActionPerformed
        
    }//GEN-LAST:event_acesActionPerformed
    
    /**
     * When the end turn button is pressed the program will run through to see 
     * which radio button was pressed and gives a score based on it
     * @param evt 
     */
    private void endTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTurnButtonActionPerformed
        UpperSection();
        LowerSection();
        if (turnCount == 0) {
            scoreTable.setValueAt(score1, 0, 1);
        }
        else if (turnCount == 1) {
            scoreTable.setValueAt(score2, 1, 1);
        }
        else if (turnCount == 2) {
            scoreTable.setValueAt(score3, 2, 1);
        }
        else {
            scoreTable.setValueAt(score4, 3, 1);
        }
        turnOrder();
        scorePage.setVisible(true);
        GamePage.setVisible(false);
        roll1.setForeground(Color.white);
        roll2.setForeground(Color.white);
        roll3.setForeground(Color.white);
        roll4.setForeground(Color.white);
        roll5.setForeground(Color.white);
        reRollCount = 0;
        reRollPress = false;
    }//GEN-LAST:event_endTurnButtonActionPerformed

    /**
     * Check if label is clicked during re roll
     * @param evt 
     */
    private void roll1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roll1MouseClicked
        if (reRollCount < 3 && reRollPress == true) {
            roll1.setForeground(Color.orange);
            reRoll1 = true;
            reRollCount++;
        }
    }//GEN-LAST:event_roll1MouseClicked
    
    /**
     * Check if label is clicked during re roll
     * @param evt 
     */
    private void roll2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roll2MouseClicked
        if (reRollCount < 3 && reRollPress == true) {
            roll2.setForeground(Color.orange);
            reRoll2 = true;
            reRollCount++;
        }
    }//GEN-LAST:event_roll2MouseClicked
    
    /**
     * Check if label is clicked during re roll
     * @param evt 
     */
    private void roll3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roll3MouseClicked
        if (reRollCount < 3 && reRollPress == true) {
            roll3.setForeground(Color.orange);
            reRoll3 = true;
            reRollCount++;
        }
    }//GEN-LAST:event_roll3MouseClicked
    
    /**
     * Check if label is clicked during re roll
     * @param evt 
     */
    private void roll4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roll4MouseClicked
        if (reRollCount < 3 && reRollPress == true) {
            roll4.setForeground(Color.orange);
            reRoll4 = true;
            reRollCount++;
        }
    }//GEN-LAST:event_roll4MouseClicked
    
    /**
     * Check if label is clicked during re roll
     * @param evt 
     */
    private void roll5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roll5MouseClicked
        if (reRollCount < 3 && reRollPress == true) {
            roll5.setForeground(Color.orange);
            reRoll5 = true;
            reRollCount++;
        }
    }//GEN-LAST:event_roll5MouseClicked
    
    /**
     * When done button is pressed it will set the selected numbers to new ones
     * @param evt 
     */
    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        if (reRoll1 == true) {
            random1 = (int)Math.round(Math.random()*5+1);
            roll1.setText(String.valueOf(random1));
        }
        if (reRoll2 == true) {
            random2 = (int)Math.round(Math.random()*5+1);
            roll2.setText(String.valueOf(random2));
        }
        if (reRoll3 == true) {
            random3 = (int)Math.round(Math.random()*5+1);
            roll3.setText(String.valueOf(random3));
        }
        if (reRoll4 == true) {
            random4 = (int)Math.round(Math.random()*5+1);
            roll4.setText(String.valueOf(random4));
        }
        if (reRoll5 == true) {
            random5 = (int)Math.round(Math.random()*5+1);
            roll5.setText(String.valueOf(random5));
        }
        reRoll();
        doneButton.setEnabled(false);
    }//GEN-LAST:event_doneButtonActionPerformed

    /**
     * Method that calls other methods
     */
    public void UpperSection() {
        Aces();
        Twos();
        Threes();
        Fours();
        Fives();
        Sixes();
    }
    
    /**
     * Another method that calls other methods
     */
    public void LowerSection() {
        ThreeKind();
        FourKind();
        FullHouse();
        SmStraight();
        LgStraight();
        Yahtzee();
        Chance();
    }
    
    /**
     * Checks if aces is selected and adds points accordingly
     */
    public void Aces() {
        //Add all ones
        if (aces.isSelected()) {
            if (random1 == 1) {
                if (turnCount == 0) {
                    score1 = score1 + 1;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 1;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 1;
                }
                else {
                    score4 = score4 + 1; 
                }
            }
            if (random2 == 1) {
                if (turnCount == 0) {
                score1 = score1 + 1;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 1;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 1;
                }
                else {
                    score4 = score4 + 1; 
                }
            }
            if (random3 == 1) {
                if (turnCount == 0) {
                    score1 = score1 + 1;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 1;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 1;
                }
                else {
                    score4 = score4 + 1; 
                }
            }
            if (random4 == 1) {
                if (turnCount == 0) {
                    score1 = score1 + 1;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 1;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 1;
                }
                else {
                    score4 = score4 + 1; 
                }
            }
            if (random5 == 1) {
                if (turnCount == 0) {
                    score1 = score1 + 1;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 1;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 1;
                }
                else {
                    score4 = score4 + 1; 
                }
            }
            if (turnCount == 0) {
                Aces1 = true;
            }
            else if (turnCount == 1) {
                Aces2 = true;
            }
            else if (turnCount == 2) {
                Aces3 = true;
            }
            else {
                Aces4 = true;
            }
        }
    }
    
    /**
     * Checks if twos is selected and adds points accordingly
     */
    public void Twos() {
        //Add all twos
        if(twos.isSelected()) {
            if (random1 == 2) {
                if (turnCount == 0) {
                    score1 = score1 + 2;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 2;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 2;
                }
                else {
                    score4 = score4 + 2; 
                }
            }
            if (random2 == 2) {
                if (turnCount == 0) {
                score1 = score1 + 2;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 2;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 2;
                }
                else {
                    score4 = score4 + 2; 
                }
            }
            if (random3 == 2) {
                if (turnCount == 0) {
                    score1 = score1 + 2;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 2;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 2;
                }
                else {
                    score4 = score4 + 2; 
                }
            }
            if (random4 == 2) {
                if (turnCount == 0) {
                    score1 = score1 + 2;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 2;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 2;
                }
                else {
                    score4 = score4 + 2; 
                }
            }
            if (random5 == 2) {
                if (turnCount == 0) {
                    score1 = score1 + 2;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 2;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 2;
                }
                else {
                    score4 = score4 + 2; 
                }
            }
            if (turnCount == 0) {
                Twos1 = true;
            }
            else if (turnCount == 1) {
                Twos2 = true;
            }
            else if (turnCount == 2) {
                Twos3 = true;
            }
            else {
                Twos4 = true;
            }
        }
    }
    
    /**
     * Checks if threes is selected and adds points accordingly
     */
    public void Threes() {
        //Add all threes
        if(threes.isSelected()) {
            if (random1 == 3) {
                if (turnCount == 0) {
                    score1 = score1 + 3;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 3;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 3;
                }
                else {
                    score4 = score4 + 3; 
                }
            }
            if (random2 == 3) {
                if (turnCount == 0) {
                    score1 = score1 + 3;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 3;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 3;
                }
                else {
                    score4 = score4 + 3; 
                }
            }
            if (random3 == 3) {
                if (turnCount == 0) {
                    score1 = score1 + 3;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 3;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 3;
                }
                else {
                    score4 = score4 + 3; 
                }
            }
            if (random4 == 3) {
                if (turnCount == 0) {
                    score1 = score1 + 3;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 3;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 3;
                }
                else {
                    score4 = score4 + 3; 
                }
            }
            if (random5 == 3) {
                if (turnCount == 0) {
                    score1 = score1 + 3;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 3;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 3;
                }
                else {
                    score4 = score4 + 3; 
                }
            }
            if (turnCount == 0) {
                Threes1 = true;
            }
            else if (turnCount == 1) {
                Threes2 = true;
            }
            else if (turnCount == 2) {
                Threes3 = true;
            }
            else {
                Threes4 = true;
            }
        }
    }
    
    /**
     * Checks if fours is selected and adds points accordingly
     */
    public void Fours() {
        //Add all fours
        if(fours.isSelected()) {
                System.out.println("E");
            if (random1 == 4) {
                if (turnCount == 0) {
                    score1 = score1 + 4;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 4;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 4;
                }
                else {
                    score4 = score4 + 4; 
                }
            }
            if (random2 == 4) {
                if (turnCount == 0) {
                    score1 = score1 + 4;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 4;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 4;
                }
                else {
                    score4 = score4 + 4; 
                }
            }
            if (random3 == 4) {
                if (turnCount == 0) {
                    score1 = score1 + 4;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 4;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 4;
                }
                else {
                    score4 = score4 + 4; 
                }
            }
            if (random4 == 4) {
                if (turnCount == 0) {
                    score1 = score1 + 4;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 4;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 4;
                }
                else {
                    score4 = score4 + 4; 
                }
            }
            if (random5 == 4) {
                if (turnCount == 0) {
                    score1 = score1 + 4;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 4;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 4;
                }
                else {
                    score4 = score4 + 4; 
                }
            }
            if (turnCount == 0) {
                Fours1 = true;
            }
            else if (turnCount == 1) {
                Fours2 = true;
            }
            else if (turnCount == 2) {
                Fours3 = true;
            }
            else {
                Fours4 = true;
            }
        }
    }
    
    /**
     * Checks if fives is selected and adds points accordingly
     */
    public void Fives() {
        //Add all fives
        if(fives.isSelected()) {
            if (random1 == 5) {
                if (turnCount == 0) {
                    score1 = score1 + 5;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 5;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 5;
                }
                else {
                    score4 = score4 + 5; 
                }
            }
            if (random2 == 5) {
                if (turnCount == 0) {
                    score1 = score1 + 5;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 5;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 5;
                }
                else {
                    score4 = score4 + 5; 
                }
            }
            if (random3 == 5) {
                if (turnCount == 0) {
                    score1 = score1 + 5;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 5;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 5;
                }
                else {
                    score4 = score4 + 5; 
                }
            }
            if (random4 == 5) {
                if (turnCount == 0) {
                    score1 = score1 + 5;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 5;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 5;
                }
                else {
                    score4 = score4 + 5; 
                }
            }
            if (random5 == 5) {
                if (turnCount == 0) {
                    score1 = score1 + 5;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 5;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 5;
                }
                else {
                    score4 = score4 + 5; 
                }
            }
            if (turnCount == 0) {
                Fives1 = true;
            }
            else if (turnCount == 1) {
                Fives2 = true;
            }
            else if (turnCount == 2) {
                Fives3 = true;
            }
            else {
                Fives4 = true;
            }
        }
    }
    
    /**
     * Checks if sixes is selected and adds points accordingly
     */
    public void Sixes() {
        //Add all sixes
        if(sixes.isSelected()) {
            if (random1 == 6) {
                if (turnCount == 0) {
                    score1 = score1 + 6;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 6;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 6;
                }
                else {
                    score4 = score4 + 6; 
                }
            }
            if (random2 == 6) {
                if (turnCount == 0) {
                    score1 = score1 + 6;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 6;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 6;
                }
                else {
                    score4 = score4 + 6; 
                }
            }
            if (random3 == 6) {
                if (turnCount == 0) {
                    score1 = score1 + 6;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 6;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 6;
                }
                else {
                    score4 = score4 + 6; 
                }
            }
            if (random4 == 6) {
                if (turnCount == 0) {
                    score1 = score1 + 6;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 6;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 6;
                }
                else {
                    score4 = score4 + 6; 
                }
            }
            if (random5 == 6) {
                if (turnCount == 0) {
                    score1 = score1 + 6;
                }
                else if (turnCount == 1) {
                    score2 = score2 + 6;
                }
                else if (turnCount == 2) {
                    score3 = score3 + 6;
                }
                else {
                    score4 = score4 + 6; 
                }
            }
            if (turnCount == 0) {
                Sixes1 = true;
            }
            else if (turnCount == 1) {
                Sixes2 = true;
            }
            else if (turnCount == 2) {
                Sixes3 = true;
            }
            else {
                Sixes4 = true;
            }
        }
    }
    
    /**
     * Checks if three of a kind is selected and adds points accordingly
     */
    public void ThreeKind() {
        
        if (threeKind.isSelected()) {
            if (turnCount == 0) {
                score1 = random1 + random2 + random3+ random4 + random5;
                threeKind1 = true;
            }
            else if (turnCount == 1) {
                score2 = random1 + random2 + random3+ random4 + random5;
                threeKind2 = true;
            }
            else if (turnCount == 2) {
                score3 = random1 + random2 + random3+ random4 + random5;
                threeKind3= true;
            }
            else if (turnCount == 3) {
                score4 = random1 + random2 + random3+ random4 + random5;
                threeKind4 = true;
            }
        }
    }
    
    /**
     * Checks if four of a kind is selected and adds points accordingly
     */
    public void FourKind() {
        if (fourKind.isSelected()) {
            if (turnCount == 0) {
                score1 = random1 + random2 + random3+ random4 + random5;
                fourKind1 = true;
            }
            else if (turnCount == 1) {
                score2 = random1 + random2 + random3+ random4 + random5;
                fourKind2 = true;
            }
            else if (turnCount == 2) {
                score3 = random1 + random2 + random3+ random4 + random5;
                fourKind3 = true;
            }
            else if (turnCount == 3) {
                score4 = random1 + random2 + random3+ random4 + random5;
                fourKind4 = true;
            }
        }
    }
    
    /**
     * Checks if full house is selected and adds points accordingly
     */
    public void FullHouse() {
        if (fullHouse.isSelected()) {
            if (turnCount == 0) {
                score1 = score1 + FULL_HOUSE;
                fullHouse1 = true;
            }
            else if (turnCount == 1) {
                score2 = score2 + FULL_HOUSE;
                fullHouse2 = true;
            }
            else if (turnCount == 2) {
                score3 = score3 + FULL_HOUSE;
                fullHouse3 = true;
            }
            else if (turnCount == 3) {
                score4 = score4 + FULL_HOUSE;
                fullHouse4 = true;
            }
        }
    }
    
    /**
     * Checks if small straight is selected and adds points accordingly
     */
    public void SmStraight() {
        if (smallStraight.isSelected()) {
            if (turnCount == 0) {
                score1 = score1 + SM_STRAIGHT;
                smallStraight1 = true;
            }
            else if (turnCount == 1) {
                score2 = score2 + SM_STRAIGHT;
                smallStraight2 = true;
            }
            else if (turnCount == 2) {
                score3 = score3 + SM_STRAIGHT;
                smallStraight3 = true;
            }
            else if (turnCount == 3) {
                score4 = score4 + SM_STRAIGHT;
                smallStraight4 = true;
            }
        }
    }
    
    /**
     * Checks if large straight is selected and adds points accordingly
     */
    public void LgStraight() {
        if(largeStraight.isSelected()) {
            if (turnCount == 0) {
                score1 = score1 + LG_STRAIGHT;
                largeStraight1 = true;
            }
            else if (turnCount == 1) {
                score2 = score2 + LG_STRAIGHT;
                largeStraight2 = true;
            }
            else if (turnCount == 2) {
                score3 = score3 + LG_STRAIGHT;
                largeStraight3 = true;
            }
            else if (turnCount == 3) {
                score4 = score4 + LG_STRAIGHT;
                largeStraight4 = true;
            }
        }
    }
    
    /**
     * Checks if yahtzee is selected and adds points accordingly
     */
    public void Yahtzee() {
        if (Yahtzee.isSelected()) {
            if (YahtzeeBonus1 == false && turnCount == 0) {
                    score1 = score1 + YAHTZEE;
            }
            else if (YahtzeeBonus1 == true && turnCount == 0) {
                    score1 = score1 + BONUS;
            }
            else if (YahtzeeBonus2 == false && turnCount == 1) {
                    score2 = score2 + YAHTZEE;
            }
            else if (YahtzeeBonus2 == true && turnCount == 1) {
                    score2 = score2 + BONUS;
            }
            else if (YahtzeeBonus3 == false && turnCount == 2) {
                    score3 = score3 + YAHTZEE;
            }
            else if (YahtzeeBonus3 == true && turnCount == 2) {
                    score3 = score3 + BONUS;
            }
            else if (YahtzeeBonus4 == false && turnCount == 3) {
                    score4 = score4 + YAHTZEE;
            }
            else if (YahtzeeBonus4 == true && turnCount == 3) {
                    score4 = score4 + BONUS;
            }
        }
    }
    
    /**
     * Checks if chance is selected and adds points accordingly
     */
    public void Chance() {
        if (chance.isSelected()) {
            if (turnCount == 0) {
                score1 = score1 + random1 + random2 + random3 + random4 + random5;
                chance1 = true;
            }
            else if (turnCount == 1) {
                score2 = score2 + random1 + random2 + random3 + random4 + random5;
                chance2 = true;
            }
            else if (turnCount == 2) {
                score3 = score3 + random1 + random2 + random3 + random4 + random5;
                chance3 = true;
            }
            else if (turnCount == 3) {
                score4 = score4 + random1 + random2 + random3 + random4 + random5;
                chance4 = true;
            }
        }
    }
    
    /**
     * Determines whos turn it is
     */
    public void turnOrder() {
        if (numPlayers == 1) {
            turnCount = 0;
        }
        else if (numPlayers == 2) {
            if (turnCount != 1) {
                turnCount = turnCount + 1;
            }
            else {
                turnCount = 0;
            }
        }
        else if (numPlayers == 3) {
            if (turnCount != 2) {
                turnCount = turnCount + 1;
            }
            else {
                turnCount = 0;
            }
        }
        else if (numPlayers == 4) {
            if (turnCount != 3) {
                turnCount = turnCount + 1;
            }
            else {
                turnCount = 0;
            }
        }
        rollButton.setEnabled(true);
        rerollButton.setEnabled(false);
        endTurnButton.setEnabled(false);
        doneButton.setEnabled(false);
        random1 = 0;
        random2 = 0;
        random3 = 0;
        random4 = 0;
        random5 = 0;
        roll1.setText("?");
        roll2.setText("?");
        roll3.setText("?");
        roll4.setText("?");
        roll5.setText("?");
        category.clearSelection();
        threeKind.setEnabled(false);
        fourKind.setEnabled(false);
        fullHouse.setEnabled(false);
        smallStraight.setEnabled(false);
        largeStraight.setEnabled(false);
        Yahtzee.setEnabled(false);
        
        
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Yahtzee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Yahtzee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Yahtzee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Yahtzee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Yahtzee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GamePage;
    private javax.swing.JButton Rules;
    private javax.swing.JPanel Start;
    private javax.swing.JRadioButton Yahtzee;
    private javax.swing.JRadioButton aces;
    private javax.swing.ButtonGroup category;
    private javax.swing.JRadioButton chance;
    private javax.swing.JLabel dicePic;
    private javax.swing.JButton doneButton;
    private javax.swing.JButton endTurnButton;
    private javax.swing.JRadioButton fives;
    private javax.swing.JRadioButton fourKind;
    private javax.swing.JRadioButton fours;
    private javax.swing.JRadioButton fullHouse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JRadioButton largeStraight;
    private javax.swing.JScrollPane lowerSection;
    private javax.swing.JButton playButton;
    private javax.swing.JComboBox playCount;
    private javax.swing.JTextField player1;
    private javax.swing.JTextField player2;
    private javax.swing.JTextField player3;
    private javax.swing.JTextField player4;
    private javax.swing.JButton rerollButton;
    private javax.swing.JLabel roll1;
    private javax.swing.JLabel roll2;
    private javax.swing.JLabel roll3;
    private javax.swing.JLabel roll4;
    private javax.swing.JLabel roll5;
    private javax.swing.JButton rollButton;
    private javax.swing.JPanel scorePage;
    private javax.swing.JTable scoreTable;
    private javax.swing.JRadioButton sixes;
    private javax.swing.JRadioButton smallStraight;
    private javax.swing.JButton startGame;
    private javax.swing.JRadioButton threeKind;
    private javax.swing.JRadioButton threes;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title1;
    private javax.swing.JLabel title2;
    private javax.swing.JLabel turnLabel;
    private javax.swing.JRadioButton twos;
    private javax.swing.JScrollPane upperSection;
    // End of variables declaration//GEN-END:variables
}
